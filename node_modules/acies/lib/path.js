"use strict";
exports.__esModule = true;
var box_1 = require("./box");
function boundingBox(p) {
    var box = new box_1.Box(p[0], p[0]);
    for (var _i = 0, p_1 = p; _i < p_1.length; _i++) {
        var path = p_1[_i];
        box = box.extend(new box_1.Box(path, path));
    }
    return box;
}
exports.boundingBox = boundingBox;
function transform(p, matrix) {
    var result = [];
    for (var _i = 0, p_2 = p; _i < p_2.length; _i++) {
        var path = p_2[_i];
        result.push(matrix.mulPosition(path));
    }
    return result;
}
exports.transform = transform;
function chop(p, step) {
    var result = [];
    for (var i = 0; i < p.length - 1; i++) {
        var a = p[i];
        var b = p[i + 1];
        var v = b.sub(a);
        var l = v.length();
        if (i === 0) {
            result.push(a);
        }
        var d = step;
        while (d < l) {
            var p1 = a.add(v.multiplyScalar(d / l));
            result.push(p1);
            d += step;
        }
        result.push(b);
    }
    return result;
}
exports.chop = chop;
function filterPaths(p, f) {
    var result = [];
    var path = [];
    for (var _i = 0, p_3 = p; _i < p_3.length; _i++) {
        var _v = p_3[_i];
        var _a = f.filter(_v), v = _a[0], ok = _a[1];
        if (ok) {
            path = path.concat(v);
        }
        else {
            if (path.length > 1) {
                result.push(path);
            }
            // TODO what is this for?
            path = [];
        }
    }
    if (path.length > 1) {
        result.push(path);
    }
    return result;
}
exports.filterPaths = filterPaths;
function simplify(p, threshold) {
    if (p.length < 3) {
        return p;
    }
    var a = p[0];
    var b = p[p.length - 1];
    var index = -1;
    var distance = 0;
    for (var i = 1; i < p.length - 1; i++) {
        var d = p[i].segmentDistance(a, b);
        if (d > distance) {
            index = i;
            distance = d;
        }
    }
    if (distance > threshold) {
        var r1 = simplify(p.slice(0, index + 1), threshold);
        var r2 = simplify(p.slice(index), threshold);
        return r1.concat(r2);
    }
    else {
        return [a, b];
    }
}
exports.simplify = simplify;
function toSVG(p) {
    var coords = [];
    for (var _i = 0, p_4 = p; _i < p_4.length; _i++) {
        var path = p_4[_i];
        coords.push(path.x + "," + path.y);
    }
    var points = coords.join(" ");
    return "<polyline stroke=\"black\" fill=\"none\" points=\"" + points + "\" />";
}
exports.toSVG = toSVG;
