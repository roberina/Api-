"use strict";
exports.__esModule = true;
var vector_1 = require("./vector");
var ray_1 = require("./ray");
var box_1 = require("./box");
/**
 * lol this is terrible
 */
var Matrix = /** @class */ (function () {
    function Matrix(x00, x01, x02, x03, x10, x11, x12, x13, x20, x21, x22, x23, x30, x31, x32, x33) {
        this.x00 = x00;
        this.x01 = x01;
        this.x02 = x02;
        this.x03 = x03;
        this.x10 = x10;
        this.x11 = x11;
        this.x12 = x12;
        this.x13 = x13;
        this.x20 = x20;
        this.x21 = x21;
        this.x22 = x22;
        this.x23 = x23;
        this.x30 = x30;
        this.x31 = x31;
        this.x32 = x32;
        this.x33 = x33;
    }
    Matrix.prototype.translate = function (v) {
        return createTranslateMatrix(v).mul(this);
    };
    Matrix.prototype.scale = function (v) {
        return createScaleMatrix(v).mul(this);
    };
    Matrix.prototype.rotate = function (v, a) {
        return rotate(v, a).mul(this);
    };
    Matrix.prototype.frustrum = function (l, r, b, t, n, f) {
        return frustrum(l, r, b, t, n, f).mul(this);
    };
    Matrix.prototype.orthographic = function (l, r, b, t, n, f) {
        return orthographic(l, r, b, t, n, f).mul(this);
    };
    Matrix.prototype.perspective = function (fovy, aspect, near, far) {
        return perspective(fovy, aspect, near, far).mul(this);
    };
    Matrix.prototype.mul = function (b) {
        var m = new Matrix();
        m.x00 =
            this.x00 * b.x00 + this.x01 * b.x10 + this.x02 * b.x20 + this.x03 * b.x30;
        m.x10 =
            this.x10 * b.x00 + this.x11 * b.x10 + this.x12 * b.x20 + this.x13 * b.x30;
        m.x20 =
            this.x20 * b.x00 + this.x21 * b.x10 + this.x22 * b.x20 + this.x23 * b.x30;
        m.x30 =
            this.x30 * b.x00 + this.x31 * b.x10 + this.x32 * b.x20 + this.x33 * b.x30;
        m.x01 =
            this.x00 * b.x01 + this.x01 * b.x11 + this.x02 * b.x21 + this.x03 * b.x31;
        m.x11 =
            this.x10 * b.x01 + this.x11 * b.x11 + this.x12 * b.x21 + this.x13 * b.x31;
        m.x21 =
            this.x20 * b.x01 + this.x21 * b.x11 + this.x22 * b.x21 + this.x23 * b.x31;
        m.x31 =
            this.x30 * b.x01 + this.x31 * b.x11 + this.x32 * b.x21 + this.x33 * b.x31;
        m.x02 =
            this.x00 * b.x02 + this.x01 * b.x12 + this.x02 * b.x22 + this.x03 * b.x32;
        m.x12 =
            this.x10 * b.x02 + this.x11 * b.x12 + this.x12 * b.x22 + this.x13 * b.x32;
        m.x22 =
            this.x20 * b.x02 + this.x21 * b.x12 + this.x22 * b.x22 + this.x23 * b.x32;
        m.x32 =
            this.x30 * b.x02 + this.x31 * b.x12 + this.x32 * b.x22 + this.x33 * b.x32;
        m.x03 =
            this.x00 * b.x03 + this.x01 * b.x13 + this.x02 * b.x23 + this.x03 * b.x33;
        m.x13 =
            this.x10 * b.x03 + this.x11 * b.x13 + this.x12 * b.x23 + this.x13 * b.x33;
        m.x23 =
            this.x20 * b.x03 + this.x21 * b.x13 + this.x22 * b.x23 + this.x23 * b.x33;
        m.x33 =
            this.x30 * b.x03 + this.x31 * b.x13 + this.x32 * b.x23 + this.x33 * b.x33;
        return m;
    };
    Matrix.prototype.mulPosition = function (b) {
        var x = this.x00 * b.x + this.x01 * b.y + this.x02 * b.z + this.x03;
        var y = this.x10 * b.x + this.x11 * b.y + this.x12 * b.z + this.x13;
        var z = this.x20 * b.x + this.x21 * b.y + this.x22 * b.z + this.x23;
        return new vector_1["default"](x, y, z);
    };
    Matrix.prototype.mulPositionW = function (b) {
        var x = this.x00 * b.x + this.x01 * b.y + this.x02 * b.z + this.x03;
        var y = this.x10 * b.x + this.x11 * b.y + this.x12 * b.z + this.x13;
        var z = this.x20 * b.x + this.x21 * b.y + this.x22 * b.z + this.x23;
        var w = this.x30 * b.x + this.x31 * b.y + this.x32 * b.z + this.x33;
        return new vector_1["default"](x / w, y / w, z / w);
    };
    Matrix.prototype.mulDirection = function (b) {
        var x = this.x00 * b.x + this.x01 * b.y + this.x02 * b.z;
        var y = this.x10 * b.x + this.x11 * b.y + this.x12 * b.z;
        var z = this.x20 * b.x + this.x21 * b.y + this.x22 * b.z;
        return new vector_1["default"](x, y, z).normalize();
    };
    Matrix.prototype.mulRay = function (b) {
        return new ray_1["default"](this.mulPosition(b.origin), this.mulDirection(b.direction));
    };
    Matrix.prototype.mulBox = function (box) {
        var _a, _b, _c;
        var r = new vector_1["default"](this.x00, this.x10, this.x20);
        var u = new vector_1["default"](this.x01, this.x11, this.x21);
        var b = new vector_1["default"](this.x02, this.x12, this.x22);
        var t = new vector_1["default"](this.x03, this.x13, this.x23);
        var xa = r.multiplyScalar(box.min.x);
        var xb = r.multiplyScalar(box.max.x);
        var ya = u.multiplyScalar(box.min.y);
        var yb = u.multiplyScalar(box.max.y);
        var za = b.multiplyScalar(box.min.z);
        var zb = b.multiplyScalar(box.max.z);
        _a = [xa.min(xb), xa.max(xb)], xa = _a[0], xb = _a[1];
        _b = [ya.min(yb), ya.max(yb)], ya = _b[0], yb = _b[1];
        _c = [za.min(zb), za.max(zb)], za = _c[0], zb = _c[1];
        var min = xa
            .add(ya)
            .add(za)
            .add(t);
        var max = xb
            .add(yb)
            .add(zb)
            .add(t);
        return new box_1.Box(min, max);
    };
    Matrix.prototype.transpose = function () {
        // prettier-ignore
        return new Matrix(this.x00, this.x10, this.x20, this.x30, this.x01, this.x11, this.x21, this.x31, this.x02, this.x12, this.x22, this.x32, this.x03, this.x13, this.x23, this.x33);
    };
    Matrix.prototype.determinant = function () {
        return (this.x00 * this.x11 * this.x22 * this.x33 -
            this.x00 * this.x11 * this.x23 * this.x32 +
            this.x00 * this.x12 * this.x23 * this.x31 -
            this.x00 * this.x12 * this.x21 * this.x33 +
            this.x00 * this.x13 * this.x21 * this.x32 -
            this.x00 * this.x13 * this.x22 * this.x31 -
            this.x01 * this.x12 * this.x23 * this.x30 +
            this.x01 * this.x12 * this.x20 * this.x33 -
            this.x01 * this.x13 * this.x20 * this.x32 +
            this.x01 * this.x13 * this.x22 * this.x30 -
            this.x01 * this.x10 * this.x22 * this.x33 +
            this.x01 * this.x10 * this.x23 * this.x32 +
            this.x02 * this.x13 * this.x20 * this.x31 -
            this.x02 * this.x13 * this.x21 * this.x30 +
            this.x02 * this.x10 * this.x21 * this.x33 -
            this.x02 * this.x10 * this.x23 * this.x31 +
            this.x02 * this.x11 * this.x23 * this.x30 -
            this.x02 * this.x11 * this.x20 * this.x33 -
            this.x03 * this.x10 * this.x21 * this.x32 +
            this.x03 * this.x10 * this.x22 * this.x31 -
            this.x03 * this.x11 * this.x22 * this.x30 +
            this.x03 * this.x11 * this.x20 * this.x32 -
            this.x03 * this.x12 * this.x20 * this.x31 +
            this.x03 * this.x12 * this.x21 * this.x30);
    };
    Matrix.prototype.inverse = function () {
        var m = new Matrix();
        var d = this.determinant();
        m.x00 =
            (this.x12 * this.x23 * this.x31 -
                this.x13 * this.x22 * this.x31 +
                this.x13 * this.x21 * this.x32 -
                this.x11 * this.x23 * this.x32 -
                this.x12 * this.x21 * this.x33 +
                this.x11 * this.x22 * this.x33) /
                d;
        m.x01 =
            (this.x03 * this.x22 * this.x31 -
                this.x02 * this.x23 * this.x31 -
                this.x03 * this.x21 * this.x32 +
                this.x01 * this.x23 * this.x32 +
                this.x02 * this.x21 * this.x33 -
                this.x01 * this.x22 * this.x33) /
                d;
        m.x02 =
            (this.x02 * this.x13 * this.x31 -
                this.x03 * this.x12 * this.x31 +
                this.x03 * this.x11 * this.x32 -
                this.x01 * this.x13 * this.x32 -
                this.x02 * this.x11 * this.x33 +
                this.x01 * this.x12 * this.x33) /
                d;
        m.x03 =
            (this.x03 * this.x12 * this.x21 -
                this.x02 * this.x13 * this.x21 -
                this.x03 * this.x11 * this.x22 +
                this.x01 * this.x13 * this.x22 +
                this.x02 * this.x11 * this.x23 -
                this.x01 * this.x12 * this.x23) /
                d;
        m.x10 =
            (this.x13 * this.x22 * this.x30 -
                this.x12 * this.x23 * this.x30 -
                this.x13 * this.x20 * this.x32 +
                this.x10 * this.x23 * this.x32 +
                this.x12 * this.x20 * this.x33 -
                this.x10 * this.x22 * this.x33) /
                d;
        m.x11 =
            (this.x02 * this.x23 * this.x30 -
                this.x03 * this.x22 * this.x30 +
                this.x03 * this.x20 * this.x32 -
                this.x00 * this.x23 * this.x32 -
                this.x02 * this.x20 * this.x33 +
                this.x00 * this.x22 * this.x33) /
                d;
        m.x12 =
            (this.x03 * this.x12 * this.x30 -
                this.x02 * this.x13 * this.x30 -
                this.x03 * this.x10 * this.x32 +
                this.x00 * this.x13 * this.x32 +
                this.x02 * this.x10 * this.x33 -
                this.x00 * this.x12 * this.x33) /
                d;
        m.x13 =
            (this.x02 * this.x13 * this.x20 -
                this.x03 * this.x12 * this.x20 +
                this.x03 * this.x10 * this.x22 -
                this.x00 * this.x13 * this.x22 -
                this.x02 * this.x10 * this.x23 +
                this.x00 * this.x12 * this.x23) /
                d;
        m.x20 =
            (this.x11 * this.x23 * this.x30 -
                this.x13 * this.x21 * this.x30 +
                this.x13 * this.x20 * this.x31 -
                this.x10 * this.x23 * this.x31 -
                this.x11 * this.x20 * this.x33 +
                this.x10 * this.x21 * this.x33) /
                d;
        m.x21 =
            (this.x03 * this.x21 * this.x30 -
                this.x01 * this.x23 * this.x30 -
                this.x03 * this.x20 * this.x31 +
                this.x00 * this.x23 * this.x31 +
                this.x01 * this.x20 * this.x33 -
                this.x00 * this.x21 * this.x33) /
                d;
        m.x22 =
            (this.x01 * this.x13 * this.x30 -
                this.x03 * this.x11 * this.x30 +
                this.x03 * this.x10 * this.x31 -
                this.x00 * this.x13 * this.x31 -
                this.x01 * this.x10 * this.x33 +
                this.x00 * this.x11 * this.x33) /
                d;
        m.x23 =
            (this.x03 * this.x11 * this.x20 -
                this.x01 * this.x13 * this.x20 -
                this.x03 * this.x10 * this.x21 +
                this.x00 * this.x13 * this.x21 +
                this.x01 * this.x10 * this.x23 -
                this.x00 * this.x11 * this.x23) /
                d;
        m.x30 =
            (this.x12 * this.x21 * this.x30 -
                this.x11 * this.x22 * this.x30 -
                this.x12 * this.x20 * this.x31 +
                this.x10 * this.x22 * this.x31 +
                this.x11 * this.x20 * this.x32 -
                this.x10 * this.x21 * this.x32) /
                d;
        m.x31 =
            (this.x01 * this.x22 * this.x30 -
                this.x02 * this.x21 * this.x30 +
                this.x02 * this.x20 * this.x31 -
                this.x00 * this.x22 * this.x31 -
                this.x01 * this.x20 * this.x32 +
                this.x00 * this.x21 * this.x32) /
                d;
        m.x32 =
            (this.x02 * this.x11 * this.x30 -
                this.x01 * this.x12 * this.x30 -
                this.x02 * this.x10 * this.x31 +
                this.x00 * this.x12 * this.x31 +
                this.x01 * this.x10 * this.x32 -
                this.x00 * this.x11 * this.x32) /
                d;
        m.x33 =
            (this.x01 * this.x12 * this.x20 -
                this.x02 * this.x11 * this.x20 +
                this.x02 * this.x10 * this.x21 -
                this.x00 * this.x12 * this.x21 -
                this.x01 * this.x10 * this.x22 +
                this.x00 * this.x11 * this.x22) /
                d;
        return m;
    };
    return Matrix;
}());
exports.Matrix = Matrix;
function createIdentityMatrix() {
    return new Matrix(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
}
exports.createIdentityMatrix = createIdentityMatrix;
function createTranslateMatrix(v) {
    // prettier-ignore
    return new Matrix(1, 0, 0, v.x, 0, 1, 0, v.y, 0, 0, 1, v.z, 0, 0, 0, 1);
}
exports.createTranslateMatrix = createTranslateMatrix;
function createScaleMatrix(v) {
    // prettier-ignore
    return new Matrix(v.x, 0, 0, 0, 0, v.y, 0, 0, 0, 0, v.z, 0, 0, 0, 0, 1);
}
exports.createScaleMatrix = createScaleMatrix;
function rotate(vs, a) {
    var v = vs.normalize();
    var s = Math.sin(a);
    var c = Math.cos(a);
    var m = 1 - c;
    // prettier-ignore
    return new Matrix(m * v.x * v.x + c, m * v.x * v.y + v.z * s, m * v.z * v.x - v.y * s, 0, m * v.x * v.y - v.z * s, m * v.y * v.y + c, m * v.y * v.z + v.x * s, 0, m * v.z * v.x + v.y * s, m * v.y * v.z - v.x * s, m * v.z * v.z + c, 0, 0, 0, 0, 1);
}
exports.rotate = rotate;
function frustrum(l, r, b, t, n, f) {
    var t1 = 2 * n;
    var t2 = r - l;
    var t3 = t - b;
    var t4 = f - n;
    // prettier-ignore
    return new Matrix(t1 / t2, 0, (r + l) / t2, 0, 0, t1 / t3, (t + b) / t3, 0, 0, 0, (-f - n) / t4, (-t1 * f) / t4, 0, 0, -1, 0);
}
exports.frustrum = frustrum;
function orthographic(l, r, b, t, n, f) {
    // prettier-ignore
    return new Matrix(2 / (r - l), 0, 0, -(r + l) / (r - l), 0, 2 / (t - b), 0, -(t + b) / (t - b), 0, 0, -2 / (f - n), -(f + n) / (f - n), 0, 0, 0, 1);
}
exports.orthographic = orthographic;
function perspective(fovy, aspect, near, far) {
    var ymax = near * Math.tan((fovy * Math.PI) / 360);
    var xmax = ymax * aspect;
    return frustrum(-xmax, xmax, -ymax, ymax, near, far);
}
exports.perspective = perspective;
function lookAt(eye, center, _up) {
    var up = _up.normalize();
    var f = center.sub(eye).normalize();
    var s = f.cross(up).normalize();
    var u = s.cross(f).normalize();
    // prettier-ignore
    var m = new Matrix(s.x, u.x, -f.x, eye.x, s.y, u.y, -f.y, eye.y, s.z, u.z, -f.z, eye.z, 0, 0, 0, 1);
    return m.inverse();
}
exports.lookAt = lookAt;
