"use strict";
// import {Vector3} from "three";
exports.__esModule = true;
// export default Vector3;
var Vector = /** @class */ (function () {
    function Vector(x, y, z) {
        this.x = x;
        this.y = y;
        this.z = z;
    }
    Vector.prototype.toString = function () {
        return "{x: " + this.x + ", y: " + this.y + ", z: " + this.z + "}";
    };
    Vector.prototype.length = function () {
        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
    };
    Vector.prototype.distance = function (b) {
        return this.sub(b).length();
    };
    Vector.prototype.lengthSquared = function () {
        var _a = this, x = _a.x, y = _a.y, z = _a.z;
        return x * x + y * y + z + z;
    };
    Vector.prototype.distanceSquared = function (b) {
        return this.sub(b).lengthSquared();
    };
    Vector.prototype.dot = function (b) {
        var _a = this, x = _a.x, y = _a.y, z = _a.z;
        return x * b.x + y * b.y + z * b.z;
    };
    Vector.prototype.cross = function (b) {
        var x = this.y * b.z - this.z * b.y;
        var y = this.z * b.x - this.x * b.z;
        var z = this.x * b.y - this.y * b.x;
        return new Vector(x, y, z);
    };
    Vector.prototype.normalize = function () {
        var len = this.length();
        return new Vector(this.x / len, this.y / len, this.z / len);
    };
    Vector.prototype.add = function (b) {
        var _a = this, x = _a.x, y = _a.y, z = _a.z;
        return new Vector(x + b.x, y + b.y, z + b.z);
    };
    Vector.prototype.sub = function (b) {
        var _a = this, x = _a.x, y = _a.y, z = _a.z;
        return new Vector(x - b.x, y - b.y, z - b.z);
    };
    Vector.prototype.mul = function (b) {
        var _a = this, x = _a.x, y = _a.y, z = _a.z;
        return new Vector(x * b.x, y * b.y, z * b.z);
    };
    Vector.prototype.div = function (b) {
        var _a = this, x = _a.x, y = _a.y, z = _a.z;
        return new Vector(x / b.x, y / b.y, z / b.z);
    };
    Vector.prototype.addScalar = function (b) {
        var _a = this, x = _a.x, y = _a.y, z = _a.z;
        return new Vector(x + b, y + b, z + b);
    };
    Vector.prototype.subScalar = function (b) {
        var _a = this, x = _a.x, y = _a.y, z = _a.z;
        return new Vector(x - b, y - b, z - b);
    };
    Vector.prototype.multiplyScalar = function (b) {
        var _a = this, x = _a.x, y = _a.y, z = _a.z;
        return new Vector(x * b, y * b, z * b);
    };
    Vector.prototype.divScalar = function (b) {
        var _a = this, x = _a.x, y = _a.y, z = _a.z;
        return new Vector(x / b, y / b, z / b);
    };
    Vector.prototype.min = function (b) {
        var x = Math.min(this.x, b.x);
        var y = Math.min(this.y, b.y);
        var z = Math.min(this.z, b.z);
        return new Vector(x, y, z);
    };
    Vector.prototype.max = function (b) {
        var x = Math.max(this.x, b.x);
        var y = Math.max(this.y, b.y);
        var z = Math.max(this.z, b.z);
        return new Vector(x, y, z);
    };
    Vector.prototype.minAxis = function () {
        var x = Math.abs(this.x);
        var y = Math.abs(this.y);
        var z = Math.abs(this.z);
        if (x <= y && x <= z) {
            return new Vector(1, 0, 0);
        }
        if (y <= x && y <= z) {
            return new Vector(0, 1, 0);
        }
        return new Vector(0, 0, 1);
    };
    Vector.prototype.minComponent = function () {
        return Math.min(this.x, this.y, this.z);
    };
    Vector.prototype.segmentDistance = function (v, w) {
        var l2 = v.distanceSquared(w);
        if (l2 === 0) {
            return this.distance(v);
        }
        var t = this.sub(v).dot(w.sub(v)) / l2;
        if (t < 0) {
            return this.distance(v);
        }
        if (t > 1) {
            return this.distance(w);
        }
        return v.add(w.sub(v).multiplyScalar(t)).distance(this);
    };
    return Vector;
}());
exports["default"] = Vector;
