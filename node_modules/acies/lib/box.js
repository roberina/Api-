"use strict";
exports.__esModule = true;
var vector_1 = require("./vector");
var axis_1 = require("./axis");
var Box = /** @class */ (function () {
    function Box(min, max) {
        // TODO is this right? Does it default to 0, 0, 0?
        this.min = min || new vector_1["default"](0, 0, 0);
        this.max = max || new vector_1["default"](0, 0, 0);
    }
    Box.prototype.anchor = function (anchor) {
        return this.min.add(this.size().mul(anchor));
    };
    Box.prototype.center = function () {
        return this.anchor(new vector_1["default"](0.5, 0.5, 0.5));
    };
    Box.prototype.size = function () {
        return this.max.sub(this.min);
    };
    Box.prototype.contains = function (b) {
        var _a = this, min = _a.min, max = _a.max;
        return (min.x <= b.x &&
            max.x >= b.x &&
            min.y <= b.y &&
            max.y >= b.y &&
            min.z <= b.z &&
            max.z >= b.z);
    };
    Box.prototype.extend = function (b) {
        var min = this.min.min(b.min);
        var max = this.max.max(b.max);
        return new Box(min, max);
    };
    Box.prototype.intersect = function (r) {
        var _a, _b, _c;
        var x1 = (this.min.x - r.origin.x) / r.direction.x;
        var y1 = (this.min.y - r.origin.y) / r.direction.y;
        var z1 = (this.min.z - r.origin.z) / r.direction.z;
        var x2 = (this.max.x - r.origin.x) / r.direction.x;
        var y2 = (this.max.y - r.origin.y) / r.direction.y;
        var z2 = (this.max.z - r.origin.z) / r.direction.z;
        if (x1 > x2) {
            _a = [x2, x1], x1 = _a[0], x2 = _a[1];
        }
        if (y1 > y2) {
            _b = [y2, y1], y1 = _b[0], y2 = _b[1];
        }
        if (z1 > z2) {
            _c = [z2, z1], z1 = _c[0], z2 = _c[1];
        }
        var t1 = Math.max(Math.max(x1, y1), z1);
        var t2 = Math.min(Math.min(x2, y2), z2);
        return [t1, t2];
    };
    Box.prototype.partition = function (axis, point) {
        switch (axis) {
            case axis_1.Axis.AxisX: {
                var left = this.min.x <= point;
                var right = this.max.x >= point;
                return [left, right];
            }
            case axis_1.Axis.AxisY: {
                var left = this.min.y <= point;
                var right = this.max.y >= point;
                return [left, right];
            }
            case axis_1.Axis.AxisZ: {
                var left = this.min.z <= point;
                var right = this.max.z >= point;
                return [left, right];
            }
        }
    };
    return Box;
}());
exports.Box = Box;
function boxForShapes(shapes) {
    if (shapes.length === 0) {
        // TODO empty box?
        return new Box();
    }
    var box = shapes[0].boundingBox();
    for (var _i = 0, shapes_1 = shapes; _i < shapes_1.length; _i++) {
        var shape = shapes_1[_i];
        box = box.extend(shape.boundingBox());
    }
    return box;
}
exports.boxForShapes = boxForShapes;
