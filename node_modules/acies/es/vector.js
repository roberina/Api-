// import {Vector3} from "three";
// export default Vector3;
export default class Vector {
    constructor(x, y, z) {
        this.x = x;
        this.y = y;
        this.z = z;
    }
    toString() {
        return `{x: ${this.x}, y: ${this.y}, z: ${this.z}}`;
    }
    length() {
        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
    }
    distance(b) {
        return this.sub(b).length();
    }
    lengthSquared() {
        let { x, y, z } = this;
        return x * x + y * y + z + z;
    }
    distanceSquared(b) {
        return this.sub(b).lengthSquared();
    }
    dot(b) {
        let { x, y, z } = this;
        return x * b.x + y * b.y + z * b.z;
    }
    cross(b) {
        let x = this.y * b.z - this.z * b.y;
        let y = this.z * b.x - this.x * b.z;
        let z = this.x * b.y - this.y * b.x;
        return new Vector(x, y, z);
    }
    normalize() {
        let len = this.length();
        return new Vector(this.x / len, this.y / len, this.z / len);
    }
    add(b) {
        let { x, y, z } = this;
        return new Vector(x + b.x, y + b.y, z + b.z);
    }
    sub(b) {
        let { x, y, z } = this;
        return new Vector(x - b.x, y - b.y, z - b.z);
    }
    mul(b) {
        let { x, y, z } = this;
        return new Vector(x * b.x, y * b.y, z * b.z);
    }
    div(b) {
        let { x, y, z } = this;
        return new Vector(x / b.x, y / b.y, z / b.z);
    }
    addScalar(b) {
        let { x, y, z } = this;
        return new Vector(x + b, y + b, z + b);
    }
    subScalar(b) {
        let { x, y, z } = this;
        return new Vector(x - b, y - b, z - b);
    }
    multiplyScalar(b) {
        let { x, y, z } = this;
        return new Vector(x * b, y * b, z * b);
    }
    divScalar(b) {
        let { x, y, z } = this;
        return new Vector(x / b, y / b, z / b);
    }
    min(b) {
        let x = Math.min(this.x, b.x);
        let y = Math.min(this.y, b.y);
        let z = Math.min(this.z, b.z);
        return new Vector(x, y, z);
    }
    max(b) {
        let x = Math.max(this.x, b.x);
        let y = Math.max(this.y, b.y);
        let z = Math.max(this.z, b.z);
        return new Vector(x, y, z);
    }
    minAxis() {
        let x = Math.abs(this.x);
        let y = Math.abs(this.y);
        let z = Math.abs(this.z);
        if (x <= y && x <= z) {
            return new Vector(1, 0, 0);
        }
        if (y <= x && y <= z) {
            return new Vector(0, 1, 0);
        }
        return new Vector(0, 0, 1);
    }
    minComponent() {
        return Math.min(this.x, this.y, this.z);
    }
    segmentDistance(v, w) {
        let l2 = v.distanceSquared(w);
        if (l2 === 0) {
            return this.distance(v);
        }
        let t = this.sub(v).dot(w.sub(v)) / l2;
        if (t < 0) {
            return this.distance(v);
        }
        if (t > 1) {
            return this.distance(w);
        }
        return v.add(w.sub(v).multiplyScalar(t)).distance(this);
    }
}
