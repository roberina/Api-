import { Tree } from "./tree";
import Ray from "./ray";
import Vector from "./vector";
import * as Paths from "./paths";
import { lookAt, createTranslateMatrix } from "./matrix";
import { ClipFilter } from "./filter";
export default class Scene {
    constructor() {
        this.shapes = [];
        this.tree = null;
    }
    compile() {
        for (const shape of this.shapes) {
            shape.compile();
        }
        this.tree = new Tree(this.shapes);
    }
    add(shape) {
        this.shapes.push(shape);
    }
    intersect(ray) {
        return this.tree.intersect(ray);
    }
    visible(eye, point) {
        const v = eye.sub(point);
        const r = new Ray(point, v.normalize());
        const hit = this.intersect(r);
        return hit.t >= v.length();
    }
    paths() {
        let results = [];
        for (const shape of this.shapes) {
            let shapePaths = shape.paths();
            shapePaths.forEach(p => results.push(p));
        }
        return results;
    }
    render(eye, center, up, width, height, fovy, near, far, step) {
        let aspect = width / height;
        let matrix = lookAt(eye, center, up);
        matrix = matrix.perspective(fovy, aspect, near, far);
        return this.renderWithMatrix(matrix, eye, width, height, step);
    }
    renderWithMatrix(matrix, eye, width, height, step) {
        this.compile();
        let paths = this.paths();
        if (step > 0) {
            paths = Paths.chop(paths, step);
        }
        let f = new ClipFilter(matrix, eye, this);
        // We're always filtering the same paths?
        paths = Paths.filterPaths(paths, f);
        if (step > 0) {
            paths = Paths.simplify(paths, 1e-6);
        }
        console.log(paths.length);
        let matrix2 = createTranslateMatrix(new Vector(1, 1, 0)).scale(new Vector(width / 2, height / 2, 0));
        return Paths.transform(paths, matrix2);
    }
}
